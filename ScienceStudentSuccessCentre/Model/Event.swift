//
//  Event.swift
//  ScienceStudentSuccessCentre
//
//  Created by Avery Vine on 2018-01-31.
//  Copyright Â© 2018 Avery Vine. All rights reserved.
//

import Foundation

/// Encompass all of the details for an SSSC event.
///
/// - Attention: You should never have to generate these yourself, as event generation is handled by the server.
class Event {
    private let urlPrefix = "https://sssc.carleton.ca"
    
    var id: String
    var name: String
    var description: String
    var dateTime: Date?
    private var rawTime: String
    var location: String
    private var url: URL?
    var imageUrl: URL?
    var actionUrl: String?
    
    private let calendar = Calendar.current
    
    var formattedDateAndTime: String {
        var formattedDateAndTime = monthName + " " + dayLeadingZero
        if rawTime != "" {
            formattedDateAndTime += "\n" + rawTime
        }
        return formattedDateAndTime
    }
    
    /// Provides the date and time the user should receive a notification for this event, or `nil` if one could not be calculated..
    ///
    /// - Remark: For the actual date and time of this event, use `getDateTime()`.
    var notificationDateTime: Date? {
        guard let dateTime = dateTime else { return nil }
        return calendar.date(byAdding: .hour, value: -1, to: dateTime)
    }
    
    var endDateTime: Date? {
        guard let dateTime = dateTime else { return nil }
        return calendar.date(byAdding: .minute, value: 30, to: dateTime)
    }
    
    /// Gets the year of the event.
    var year: Int {
        return calendar.component(.year, from: dateTime!)
    }
    
    /// Gets the month of the event, as a 3-letter string.
    ///
    /// - Remark: To get the month as a number, use the corresponding function `getMonth()`.
    var monthName: String {
        let months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        return months[month - 1]
    }
    
    /// Gets the month of the event, as an integer.
    ///
    /// - Remark: To get the month as a 3-letter string, use the corresponding function `getMonthName()`.
    var month: Int {
        return calendar.component(.month, from: dateTime!)
    }
    
    /// Gets the day of the event, as an integer.
    ///
    /// - Remark: For a formatted day (with leading zero), use the corresponding function `getDayLeadingZero()`.
    var day: Int {
        return calendar.component(.day, from: dateTime!)
    }
    
    /// Gets the day of this event, formatted with a leading zero.
    ///
    /// - Remark: For an unformatted day (as an integer), use the corresponding function `getDay()`.
    var dayLeadingZero: String {
        if day < 10 {
            return "0" + String(day)
        }
        return String(day)
    }
    
    /// Formats the event time for quick summarization, based off the parsed Date object.
    var formattedTime: String {
        let formatter = DateFormatter()
        formatter.timeStyle = .medium
        formatter.amSymbol = "am"
        formatter.pmSymbol = "pm"
        formatter.dateFormat = "HH:mm"
        let formattedTime = formatter.date(from: formatter.string(from: dateTime!))
        formatter.dateFormat = "h:mma"
        return formatter.string(from: formattedTime!)
    }
    
    /// Gets the complete URL of the event, including the domain name portion, or `nil` if one could not be found..
    var eventUrl: URL? {
        guard let url = url else { return nil }
        return URL(string: urlPrefix + url.absoluteString)
    }
    
    /// Initializes an event based off a dictionary of data provided by the server.
    ///
    /// - Parameter eventData: The data parsed and generated by the server for this event.
    required convenience init?(eventData: NSDictionary) {
        guard let id = eventData["id"] as? String,
            let name = eventData["name"] as? String,
            let description = eventData["description"] as? String,
            let dateTimeWithMillis = eventData["dateTime"] as? String,
            let rawTime = eventData["rawTime"] as? String,
            let location = eventData["location"] as? String else {
                return nil
        }
        let dateTimeNoFormatting = dateTimeWithMillis.replacingOccurrences(of: "\\.\\d+", with: "", options: .regularExpression)
        let dateTime = Formatter.iso8601.date(from: dateTimeNoFormatting)
        
        let url: URL?
        if let urlString = eventData["url"] as? String, urlString != "" {
            url = URL(string: urlString)
        } else {
            url = nil
        }
        
        let imageUrl: URL?
        if let imageUrlString = eventData["imageUrl"] as? String, imageUrlString != "" {
            imageUrl = URL(string: imageUrlString)
        } else {
            imageUrl = nil
        }
        
        let actionUrl = eventData["actionUrl"] as? String
        
        self.init(id: id, name: name, description: description,
                  dateTime: dateTime, rawTime: rawTime, location: location,
                  url: url, imageUrl: imageUrl, actionUrl: actionUrl)
    }
    
    private init(id: String, name: String, description: String,
                 dateTime: Date?, rawTime: String, location: String,
                 url: URL?, imageUrl: URL?, actionUrl: String?) {
        self.id = id
        self.name = name
        self.description = description
        self.dateTime = dateTime
        self.rawTime = rawTime
        self.location = location
        self.url = url
        self.imageUrl = imageUrl
        self.actionUrl = actionUrl
    }
    
    public static func generateTestEvent() -> Event {
        return Event(id: "12345",
                     name: "Test Event",
                     // swiftlint:disable:next line_length
                     description: "This is a test description. It is very long and repeats itself. This is a test description. It is very long and repeats itself. This is a test description. It is very long and repeats itself.",
                     dateTime: Date(),
                     rawTime: "5pm",
                     location: "3431 Herzberg",
                     url: nil,
                     imageUrl: nil,
                     actionUrl: "https://central.carleton.ca")
    }
    
    public static func generateTestEvent2() -> Event {
        return Event(id: "67890",
                     name: "Test Event 2",
                     description: "Description description description description description description description description description description.",
                     dateTime: Date(timeInterval: TimeInterval(integerLiteral: 86400), since: Date()),
                     rawTime: "2:00pm - 3:00pm",
                     location: "3431 Herzberg",
                     url: URL(string: "https://sssc.carleton.ca/sites/default/files/inline-images/Roxy.jpg")!,
                     imageUrl: URL(string: "https://sssc.carleton.ca/sites/default/files/inline-images/Roxy.jpg"),
                     actionUrl: nil)
    }
}
